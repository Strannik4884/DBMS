--
-- PostgreSQL database dump
--

-- Dumped from database version 11.2
-- Dumped by pg_dump version 11.2

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: email; Type: DOMAIN; Schema: public; Owner: postgres
--

CREATE DOMAIN public.email AS text
	CONSTRAINT email_check CHECK ((VALUE ~* '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'::text));


ALTER DOMAIN public.email OWNER TO postgres;

--
-- Name: phone; Type: DOMAIN; Schema: public; Owner: postgres
--

CREATE DOMAIN public.phone AS text
	CONSTRAINT phone_check CHECK ((VALUE ~* '^\+7\(\d{3}\)\d{3}-\d{2}-\d{2}$'::text));


ALTER DOMAIN public.phone OWNER TO postgres;

--
-- Name: check_feedback_date(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.check_feedback_date() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
    feedbackTimestamp timestamp;
    begin
        -- if request with current email doesn't exist
        if not (select exists(select 1 from feedback where email = (select NEW.email))) then
            return NEW;
        end if;
        -- get previous request date with current email
        feedbackTimestamp := (select date from feedback where email = (select NEW.email) order by id desc limit 1);
        if feedbackTimestamp + interval '1 hour' <= now() then
            return NEW;
        else
          raise exception 'Feedback check failed' using detail = feedbackTimestamp;
        end if;
    end;
$$;


ALTER FUNCTION public.check_feedback_date() OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: feedback; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feedback (
    id integer NOT NULL,
    date timestamp without time zone DEFAULT now() NOT NULL,
    name character varying(256) NOT NULL,
    email public.email NOT NULL,
    phone public.phone NOT NULL,
    comment character varying(256) NOT NULL
);


ALTER TABLE public.feedback OWNER TO postgres;

--
-- Name: feedback_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.feedback_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feedback_id_seq OWNER TO postgres;

--
-- Name: feedback_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.feedback_id_seq OWNED BY public.feedback.id;


--
-- Name: feedback id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feedback ALTER COLUMN id SET DEFAULT nextval('public.feedback_id_seq'::regclass);


--
-- Data for Name: feedback; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.feedback (id, date, name, email, phone, comment) FROM stdin;
\.


--
-- Name: feedback_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.feedback_id_seq', 1, false);


--
-- Name: feedback pk_request; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feedback
    ADD CONSTRAINT pk_request PRIMARY KEY (id);


--
-- Name: request_pk; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX request_pk ON public.feedback USING btree (id);


--
-- Name: feedback add_new_request; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER add_new_request BEFORE INSERT ON public.feedback FOR EACH ROW EXECUTE PROCEDURE public.check_feedback_date();


--
-- PostgreSQL database dump complete
--

